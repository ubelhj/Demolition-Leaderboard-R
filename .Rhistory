install.packages(rdrop2)
install.packages('rdrop2')
setwd("B:/devel/demobotR")
library(httr)
library(rdrop2)
library(dplyr)
library(data.table)
library(jsonlite)
library(purrr)
drop_download('/Apps/Demo Leaderboard/leaderboard.json')
drop_download('/Apps/Demo Leaderboard/leaderboard.json', overwrite = TRUE)
leaderboard <- jsonlite::fromJSON("./leaderboard.json", flatten = FALSE)
View(leaderboard)
json_file <- lapply(leaderboard, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
View(json_file)
d2 <- lapply(leaderboard, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
View(d2)
d3 <- unlist(leaderboard, recursive = FALSE)
View(d3)
d4 <- unlist(leaderboard, recursive = FALSE)
View(d4)
d4 <- unlist(leaderboard, recursive = TRUE)
d4 <- unlist(d3, recursive = FALSE)
leaderboard["Car"]
leaderboard[1]
leaderboard[1][2]
leaderboard[1][3]
leaderboard[1][3][1]
leaderboard[["A_Sarchasm"]][["Demos"]]
leaderboard$1
leaderboard[[1]][["Demos"]]
leaderboard[[c(1:58)]][["Demos"]]
leaderboard[[c(1:57)]][["Demos"]]
leaderboard[[c(1:50)]][["Demos"]]
leaderboard[[c(1:50)]]
leaderboard[["A_Sarchasm"]][["Demos"]]
unlist(leaderboard[1])
View(d3)
drop_download('/Apps/Demo Leaderboard/leaderboard.csv', overwrite = TRUE)
leaderboard <- read.csv("./leaderboard.csv")
View(leaderboard)
leaderboard <- read.csv("./leaderboard.csv") %>%
sort(leaderboard$Demos)
d1 <- sort(leaderboard$Demos)
?sort
leaderboard <- read.csv("./leaderboard.csv") %>%
sort(decreasing = T)
leaderboard <- read.csv("./leaderboard.csv") %>%
sort(decreasing = T, 2)
d1 <- leaderboard[order(demos),]
d1 <- leaderboard[order("demos"),]
View(d1)
d1 <- leaderboard[order("Demos"),]
View(leaderboard)
d1 <- leaderboard[order(leaderboard$Demos),]
View(d1)
d1 <- leaderboard[order(!leaderboard$Demos),]
View(d1)
d1 <- leaderboard[order(leaderboard$Demos),]
View(d1)
d1 <- leaderboard[order(-leaderboard$Demos),]
View(d1)
leaderboard <- leaderboard[order(-leaderboard$Demos),] %>%
unique()
View(leaderboard)
library(shiny)
shinyServer(server)
shinyUI(ui)
ui <- navbarPage(title="Demolitions Leaderboard")
server <- function(input, output) {
}
runApp()
runApp()
runApp()
runApp()
git add server.R
drop_auth()
token <- drop_auth()
saveRDS(token, file = "token.rds")
drop_auth(rdstoken = "token.rds")
#token <- drop_auth()
#saveRDS(token, file = "token.rds")
drop_download('/Apps/Demo Leaderboard/leaderboard.csv', overwrite = TRUE, dtoken = token)
token <- drop_auth(rdstoken = "token.rds")
#token <- drop_auth()
#saveRDS(token, file = "token.rds")
drop_download('/Apps/Demo Leaderboard/leaderboard.csv', overwrite = TRUE, dtoken = token)
source('B:/devel/demobotR/demolitions.R', echo=TRUE)
runApp()
#token <- drop_auth()
#saveRDS(token, file = "token.rds")
drop_download('/Apps/Demo Leaderboard/leaderboard.csv', overwrite = TRUE, dtoken = token)
leaderboard <- read.csv("./leaderboard.csv")
leaderboard <- leaderboard[order(-leaderboard$Demos),] %>%
unique()
View(leaderboard)
token <- drop_auth(rdstoken = "token.rds")
#token <- drop_auth()
#saveRDS(token, file = "token.rds")
drop_download('/Apps/Demo Leaderboard/leaderboard.csv', overwrite = TRUE, dtoken = token)
leaderboard <- read.csv("./leaderboard.csv")
leaderboard <- leaderboard[order(-leaderboard$Demos),] %>%
unique()
?unique
d1 <- leaderboard[unique(leaderboard), ]
d1 <- leaderboard[unique(leaderboard$Username), ]
View(d1)
d1 <- distinct(leaderboard)
d1 <- unique(leaderboard$Username)
d1 <- leaderboard[unique(leaderboard$Username), ]
View(d1)
d1 <- leaderboard[duplicated(leaderboard$Username), ]
View(d1)
d1 <- leaderboard[!duplicated(leaderboard$Username), ]
View(d1)
RV <- reactiveValues(data = leaderboard)
app <- shinyApp(ui, server)
server <- function(input, output) {
output$table <- renderDataTable(RV$leaderboard)
observeEvent(input$refresh, {
drop_download('/Apps/Demo Leaderboard/leaderboard.csv', overwrite = TRUE, dtoken = token)
leaderboard <- read.csv("./leaderboard.csv")
leaderboard <- leaderboard[order(-leaderboard$Demos),]
leaderboard <- leaderboard[!duplicated(leaderboard$Username), ]
})
}
ui <-fluidPage(title="Demolitions Leaderboard",
mainPanel(p(actionButton("refresh", "Refresh")),
dataTableOutput("table")))
app <- shinyApp(ui, server)
runApp('demolitions.R')
runApp('demolitions.R')
